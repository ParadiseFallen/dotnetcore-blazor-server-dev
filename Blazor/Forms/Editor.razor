@page "/forms/edit/{id:long}"
@layout EmptyLayout
<link href="/css/blazorValidation.css" rel="stylesheet" />

<h4 class="bg-primary text-center text-white p-2">Edit</h4>
<FormSpy PersonData="PersonData">
  <EditForm Model="PersonData">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
      <label>Person ID</label>
      <InputNumber class="form-control"
        @bind-Value="PersonData.PersonId"
        disabled />
      </div>
      <ValidationMessage For="@(() => PersonData.Firstname)" />
      <div class="form-group">
      <label>Firstname</label>
      <InputText
        class="form-control"
        @bind-Value="PersonData.Firstname" />
      </div>
      <ValidationMessage For="@(() => PersonData.Surname)"/>
      <div class="form-group">
      <label>Surname</label>
      <ValidationMessage For="@(() => PersonData.DepartmentId)" />
      <InputText
        class="form-control"
        @bind-Value="PersonData.Surname" />
      </div>
      <div class="form-group">
      <label>Dept ID</label>
      <CustomSelect
        TValue="long"
        Values="Departments"
        Parser="@(str => long.Parse(str))"
        @bind-Value="PersonData.DepartmentId">
          <option selected disabled value="0">Choose a Department</option>
      </CustomSelect>
      </div>
      <div class="form-group">
      <label>Location ID</label>
      <ValidationMessage For="@(() => PersonData.LocationId)" />
      <CustomSelect
        TValue="long"
        Values="Locations"
        Parser="@(str => long.Parse(str))"
        @bind-Value="PersonData.LocationId">
          <option selected disabled value="0">Choose a Location</option>
      </CustomSelect>
      </div>
  </EditForm>
  <div class="text-center">
    <NavLink class="btn btn-secondary" href="/forms">Back</NavLink>
  </div>
</FormSpy>
@code {
  [Inject]
  public NavigationManager NavManager { get; set; }
  [Inject]
  DataContext Context { get; set; }
  [Parameter]
  public long Id { get; set; }
  public Person PersonData { get; set; } = new Person();
  public IDictionary<string, long> Departments { get; set; }
    = new Dictionary<string, long>();
  public IDictionary<string, long> Locations { get; set; }
    = new Dictionary<string, long>();
  protected async override Task OnParametersSetAsync() {
    PersonData = await Context.People.FindAsync(Id);
    Departments =
      await Context.Departments.ToDictionaryAsync(d => d.Name, d => d.Departmentid);
    Locations =
      await Context.Locations.ToDictionaryAsync(l => $"{l.City}, {l.State}", l => l.LocationId);
  }
}